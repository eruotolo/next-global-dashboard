// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL")
}

model User {
    id        String     @id @default(uuid())
    email     String     @unique
    name      String
    lastName  String
    birthdate DateTime?
    phone     String?
    address   String?
    city      String?
    password  String
    image     String?
    state     Int?
    createdAt DateTime   @default(now())
    roles     UserRole[]

    @@index([email])
    @@index([name])
    @@index([lastName])
}

model Role {
    id             String           @id @default(uuid())
    name           String           @unique
    state          Int              @default(1)
    createdAt      DateTime         @default(now())
    users          UserRole[]
    permissionRole PermissionRole[]

    @@index([name])
}

model UserRole {
    id        String   @id @default(uuid())
    userId    String?
    roleId    String?
    role      Role?    @relation(fields: [roleId], references: [id], onDelete: Cascade)
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}

enum TicketStatus {
    OPEN
    IN_PROGRESS
    RESOLVED
    CLOSED
}

enum TicketPriority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

model Ticket {
    id           String         @id @default(uuid())
    code         String
    title        String
    description  String?
    image        String?
    userId       String
    userName     String
    userLastName String
    status       TicketStatus   @default(OPEN)
    priority     TicketPriority @default(LOW)
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
}

model Permission {
    id             String           @id @default(uuid())
    name           String
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    permissionRole PermissionRole[]
}

model PermissionRole {
    id           String      @id @default(uuid())
    roleId       String?
    permissionId String?
    role         Role?       @relation(fields: [roleId], references: [id], onDelete: Cascade)
    permission   Permission? @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    createdAt    DateTime    @default(now())
}
